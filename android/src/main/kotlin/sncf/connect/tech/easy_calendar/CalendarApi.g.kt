// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package sncf.connect.tech.easy_calendar

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * Native data struct to represent a calendar.
 * 
 * [id] is a unique identifier for the calendar.
 * 
 * [title] is the title of the calendar.
 * 
 * [color] is the color of the calendar.
 * 
 * [isWritable] is a boolean to indicate if the calendar is writable.
 * 
 * [sourceName] is the name of the source of the calendar.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class Calendar (
  val id: String,
  val title: String,
  val color: Long,
  val isWritable: Boolean,
  val sourceName: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Calendar {
      val id = pigeonVar_list[0] as String
      val title = pigeonVar_list[1] as String
      val color = pigeonVar_list[2] as Long
      val isWritable = pigeonVar_list[3] as Boolean
      val sourceName = pigeonVar_list[4] as String
      return Calendar(id, title, color, isWritable, sourceName)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      title,
      color,
      isWritable,
      sourceName,
    )
  }
}

/**
 * Native data struct to represent an event.
 * 
 * [id] is a unique identifier for the event.
 * 
 * [title] is the title of the event.
 * 
 * [isAllDay] is whether or not the event is an all day.
 * 
 * [startDate] is the start date of the event in milliseconds since epoch.
 * 
 * [endDate] is the end date of the event in milliseconds since epoch.
 * 
 * [calendarId] is the id of the calendar that the event belongs to.
 * 
 * [description] is the description of the event.
 * 
 * [url] is the url of the event.  
 * 
 * [reminders] is a list of minutes before the event to remind the user.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class Event (
  val id: String,
  val title: String,
  val isAllDay: Boolean,
  val startDate: Long,
  val endDate: Long,
  val calendarId: String,
  val description: String? = null,
  val url: String? = null,
  val reminders: List<Long>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Event {
      val id = pigeonVar_list[0] as String
      val title = pigeonVar_list[1] as String
      val isAllDay = pigeonVar_list[2] as Boolean
      val startDate = pigeonVar_list[3] as Long
      val endDate = pigeonVar_list[4] as Long
      val calendarId = pigeonVar_list[5] as String
      val description = pigeonVar_list[6] as String?
      val url = pigeonVar_list[7] as String?
      val reminders = pigeonVar_list[8] as List<Long>?
      return Event(id, title, isAllDay, startDate, endDate, calendarId, description, url, reminders)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      title,
      isAllDay,
      startDate,
      endDate,
      calendarId,
      description,
      url,
      reminders,
    )
  }
}
private open class CalendarApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Calendar.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Event.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Calendar -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is Event -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CalendarApi {
  fun requestCalendarPermission(callback: (Result<Boolean>) -> Unit)
  fun createCalendar(title: String, color: Long, callback: (Result<Calendar>) -> Unit)
  fun retrieveCalendars(onlyWritableCalendars: Boolean, callback: (Result<List<Calendar>>) -> Unit)
  fun deleteCalendar(calendarId: String, callback: (Result<Unit>) -> Unit)
  fun createEvent(title: String, startDate: Long, endDate: Long, calendarId: String, isAllDay: Boolean, description: String?, url: String?, callback: (Result<Event>) -> Unit)
  fun retrieveEvents(calendarId: String, startDate: Long, endDate: Long, callback: (Result<List<Event>>) -> Unit)
  fun deleteEvent(eventId: String, calendarId: String, callback: (Result<Unit>) -> Unit)
  fun createReminder(reminder: Long, eventId: String, callback: (Result<Event>) -> Unit)
  fun deleteReminder(reminder: Long, eventId: String, callback: (Result<Event>) -> Unit)

  companion object {
    /** The codec used by CalendarApi. */
    val codec: MessageCodec<Any?> by lazy {
      CalendarApiPigeonCodec()
    }
    /** Sets up an instance of `CalendarApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CalendarApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.easy_calendar.CalendarApi.requestCalendarPermission$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.requestCalendarPermission{ result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.easy_calendar.CalendarApi.createCalendar$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val titleArg = args[0] as String
            val colorArg = args[1] as Long
            api.createCalendar(titleArg, colorArg) { result: Result<Calendar> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.easy_calendar.CalendarApi.retrieveCalendars$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val onlyWritableCalendarsArg = args[0] as Boolean
            api.retrieveCalendars(onlyWritableCalendarsArg) { result: Result<List<Calendar>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.easy_calendar.CalendarApi.deleteCalendar$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val calendarIdArg = args[0] as String
            api.deleteCalendar(calendarIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.easy_calendar.CalendarApi.createEvent$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val titleArg = args[0] as String
            val startDateArg = args[1] as Long
            val endDateArg = args[2] as Long
            val calendarIdArg = args[3] as String
            val isAllDayArg = args[4] as Boolean
            val descriptionArg = args[5] as String?
            val urlArg = args[6] as String?
            api.createEvent(titleArg, startDateArg, endDateArg, calendarIdArg, isAllDayArg, descriptionArg, urlArg) { result: Result<Event> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.easy_calendar.CalendarApi.retrieveEvents$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val calendarIdArg = args[0] as String
            val startDateArg = args[1] as Long
            val endDateArg = args[2] as Long
            api.retrieveEvents(calendarIdArg, startDateArg, endDateArg) { result: Result<List<Event>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.easy_calendar.CalendarApi.deleteEvent$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val eventIdArg = args[0] as String
            val calendarIdArg = args[1] as String
            api.deleteEvent(eventIdArg, calendarIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.easy_calendar.CalendarApi.createReminder$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reminderArg = args[0] as Long
            val eventIdArg = args[1] as String
            api.createReminder(reminderArg, eventIdArg) { result: Result<Event> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.easy_calendar.CalendarApi.deleteReminder$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reminderArg = args[0] as Long
            val eventIdArg = args[1] as String
            api.deleteReminder(reminderArg, eventIdArg) { result: Result<Event> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
